🐾 ==========================================
🐾   C++ While Loop 대화형 학습 프로그램
🐾 ==========================================

🎮 주인공: Test (Test)
🎓 선생님: 치치 (Student)
=== Test (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 Test
[36m[Test]: [0m안녕하세요! While Loop를 배우고 싶어요! 🐕

이름을 입력해주세요: [33m
📚 기본 개념 학습을 시작합니다!
[0m
==================================================
[33m📚 1. While Loop 기본 개념
[0m==================================================
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m안녕하세요! 오늘은 While Loop에 대해 배워볼 거예요! 🐕
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m안녕하세요! While Loop를 배우고 싶어요! 🐕
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0mWhile Loop는 프로그래밍에서 가장 중요한 반복문 중 하나랍니다.
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m조건이 참인 동안 반복한다는 건 어떤 뜻인가요?
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m조건이 참인 동안 계속 반복하는 구조예요.
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m아하! 이해했어요!
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

[36m💡 개념 설명:
[0mWhile Loop는 조건이 참인 동안 반복적으로 코드 블록을 실행하는 반복문입니다.
조건이 거짓이 되면 반복이 멈춥니다.
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 치치
[34m[치치]: [0m이해했나요?

[32m💻 코드 예제:
[0mwhile (조건) {
    // 실행할 코드
}
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 치치
[34m[치치]: [0m이 코드를 분석해보세요!

[31m🎯 실습 문제:
[0m다음 중 while loop의 올바른 구문은?
[35m💡 힌트: while 키워드 다음에 괄호가 있어야 해요.
[0m답을 입력하세요: === 치치 (치와와) ===
  /\_/\
 ( T.T )
  > ^ <
슬픈 치치
[34m[치치]: [0m틀렸어요. 정답은 'while (조건) {' 입니다.
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음 단계로 넘어가요!


==================================================
[33m📚 2. While Loop 실행 과정
[0m==================================================
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m이제 While Loop가 어떻게 작동하는지 자세히 설명해드릴게요!
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m실행 과정을 단계별로 설명해주세요!
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m먼저 조건을 확인하고, 참이면 코드를 실행해요.
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m조건 확인 → 코드 실행 → 다시 조건 확인...
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m그 다음 다시 조건을 확인하는 과정을 반복하죠.
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m이해했어요! 반복하는 구조네요!
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

[36m💡 개념 설명:
[0m1. 조건을 확인합니다
2. 조건이 참이면 코드 블록을 실행합니다
3. 다시 조건을 확인합니다
4. 조건이 거짓이 될 때까지 반복합니다
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 치치
[34m[치치]: [0m이해했나요?

[32m💻 코드 예제:
[0mint i = 0;
while (i < 3) {
    cout << i << endl;
    i++;
}
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 치치
[34m[치치]: [0m이 코드를 분석해보세요!

[31m🎯 실습 문제:
[0m위 코드의 출력 결과는?
[35m💡 힌트: i가 0부터 시작해서 3보다 작을 때까지 반복해요.
[0m답을 입력하세요: === 치치 (치와와) ===
  /\_/\
 ( T.T )
  > ^ <
슬픈 치치
[34m[치치]: [0m틀렸어요. 정답은 '0
1
2' 입니다.
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음 단계로 넘어가요!


==================================================
[33m📚 3. 무한 루프 주의사항
[0m==================================================
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m무한 루프는 프로그래머가 가장 조심해야 할 부분이에요!
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m무한 루프가 뭔가요?
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m조건이 절대 거짓이 되지 않으면 프로그램이 멈추지 않아요.
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m조건을 변경하는 코드... i++ 같은 걸 말하는 건가요?
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m반드시 조건을 변경하는 코드를 넣어야 해요.
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m아하! 이해했어요!
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

[36m💡 개념 설명:
[0m조건이 절대 거짓이 되지 않으면 무한 루프가 발생합니다.
반드시 조건을 변경하는 코드가 있어야 합니다!
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 치치
[34m[치치]: [0m이해했나요?

[32m💻 코드 예제:
[0mint i = 0;
while (i < 5) {
    cout << i << endl;
    // i++가 없으면 무한 루프!
}
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 치치
[34m[치치]: [0m이 코드를 분석해보세요!

[31m🎯 실습 문제:
[0m무한 루프를 방지하려면 무엇을 해야 할까요?
[35m💡 힌트: 변수 값을 증가시키거나 감소시켜야 해요.
[0m답을 입력하세요: === 치치 (치와와) ===
  /\_/\
 ( T.T )
  > ^ <
슬픈 치치
[34m[치치]: [0m틀렸어요. 정답은 '조건을 변경하는 코드를 추가한다' 입니다.
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음 단계로 넘어가요!


==================================================
[33m📚 4. Do-While Loop
[0m==================================================
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m이제 Do-While Loop에 대해 알아볼까요?
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0mDo-While Loop는 뭔가요?
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0mWhile Loop와 비슷하지만 실행 순서가 달라요.
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0mWhile Loop와 다른 점이 있나요?
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m최소 한 번은 실행된다는 점이 중요해요!
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m최소 한 번은 실행된다는 건 좋네요!
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

[36m💡 개념 설명:
[0mDo-While Loop는 코드를 먼저 실행한 후 조건을 확인합니다.
최소 한 번은 실행됩니다.
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 치치
[34m[치치]: [0m이해했나요?

[32m💻 코드 예제:
[0mdo {
    // 실행할 코드
} while (조건);
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 치치
[34m[치치]: [0m이 코드를 분석해보세요!

[31m🎯 실습 문제:
[0mdo-while과 while의 차이점은?
[35m💡 힌트: do-while은 조건 확인 전에 먼저 실행해요.
[0m답을 입력하세요: === 치치 (치와와) ===
  /\_/\
 ( T.T )
  > ^ <
슬픈 치치
[34m[치치]: [0m틀렸어요. 정답은 'do-while은 최소 한 번은 실행된다' 입니다.
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음 단계로 넘어가요!


==================================================
[33m📚 5. While Loop 활용 예제
[0m==================================================
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m이제 실제 활용 예제를 보여드릴게요!
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m실제로 어떻게 사용하나요?
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m사용자 입력 처리에 자주 사용되는 패턴이에요.
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m사용자 입력을 받을 때 사용하는군요!
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m게임이나 프로그램에서 매우 유용해요!
=== Test (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 Test
[36m[Test]: [0m정말 유용하네요!
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m계속하시겠어요?

[36m💡 개념 설명:
[0mWhile Loop는 사용자 입력 처리, 파일 읽기, 게임 루프 등에 활용됩니다.
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 치치
[34m[치치]: [0m이해했나요?

[32m💻 코드 예제:
[0mint number;
do {
    cout << "양수를 입력하세요: ";
    cin >> number;
} while (number <= 0);
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
생각하는 치치
[34m[치치]: [0m이 코드를 분석해보세요!

[31m🎯 실습 문제:
[0m위 코드는 무엇을 하는가?
[35m💡 힌트: 0 이하의 수가 입력되면 다시 입력받아요.
[0m답을 입력하세요: === 치치 (치와와) ===
  /\_/\
 ( T.T )
  > ^ <
슬픈 치치
[34m[치치]: [0m틀렸어요. 정답은 '양수를 입력받을 때까지 반복한다' 입니다.
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음 단계로 넘어가요!

[33m
📝 이해도 점검 퀴즈를 시작합니다!
[0m
==================================================
[33m📝 이해도 점검 퀴즈
[0m==================================================
=== 치치 (치와와) ===
  /\_/\
 ( o.o )
  > ^ <
치와와 치치
[34m[치치]: [0m이제 배운 내용을 퀴즈로 점검해볼까요? 🎯

📋 문제: While Loop의 올바른 기본 구문은?
1. while (조건) {
2. while 조건 {
3. while (조건)
4. while 조건

답을 선택하세요 (1-4): === 치치 (치와와) ===
  /\_/\
 ( T.T )
  > ^ <
슬픈 치치
[34m[치치]: [0m틀렸어요. 정답은 1번입니다.
[32m📚 설명: while 키워드 다음에 괄호로 조건을 감싸야 해요.
[0m=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음 문제로 넘어가요!


📋 문제: 무한 루프를 방지하려면?
1. 조건을 복잡하게 만든다
2. 조건을 변경하는 코드를 추가한다
3. while 키워드를 생략한다
4. 괄호를 제거한다

답을 선택하세요 (1-4): === 치치 (치와와) ===
  /\_/\
 ( T.T )
  > ^ <
슬픈 치치
[34m[치치]: [0m틀렸어요. 정답은 2번입니다.
[32m📚 설명: 조건을 변경하는 코드(예: i++)가 필요해요.
[0m=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음 문제로 넘어가요!


📋 문제: int i = 0; while (i < 3) { cout << i; i++; } 의 출력은?
1. 012
2. 123
3. 0123
4. 1234

답을 선택하세요 (1-4): === 치치 (치와와) ===
  /\_/\
 ( T.T )
  > ^ <
슬픈 치치
[34m[치치]: [0m틀렸어요. 정답은 1번입니다.
[32m📚 설명: i가 0, 1, 2일 때 출력되고, 3이 되면 반복이 멈춰요.
[0m=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음 문제로 넘어가요!


📋 문제: Do-While Loop의 특징은?
1. 더 빠르다
2. 최소 한 번은 실행된다
3. 더 안전하다
4. 차이점이 없다

답을 선택하세요 (1-4): === 치치 (치와와) ===
  /\_/\
 ( T.T )
  > ^ <
슬픈 치치
[34m[치치]: [0m틀렸어요. 정답은 2번입니다.
[32m📚 설명: do-while은 조건 확인 전에 먼저 코드를 실행해요.
[0m=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음 문제로 넘어가요!


📋 문제: 사용자 입력 처리에 적합한 것은?
1. while (true)
2. do-while
3. for loop
4. if-else

답을 선택하세요 (1-4): === 치치 (치와와) ===
  /\_/\
 ( T.T )
  > ^ <
슬픈 치치
[34m[치치]: [0m틀렸어요. 정답은 2번입니다.
[32m📚 설명: do-while은 최소 한 번은 입력받을 수 있어서 적합해요.
[0m=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음 문제로 넘어가요!


==================================================
[32m🎉 While Loop 학습 완료! 🎉
[0m==================================================
=== Test (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 Test
[36m[Test]: [0m축하합니다! 학습이 완료되었어요! 🎊
최종 점수: 0/30 (0%)
기본 개념을 다시 한번 복습해보세요! 📚
=== 치치 (치와와) ===
  /\_/\
 ( ^.^ )
  > ^ <
행복한 치치
[34m[치치]: [0m다음에 또 만나요! 🐕
